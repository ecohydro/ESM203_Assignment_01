#         se = FALSE) +
# geom_line(aes(y=rollmedian(air_temperature, 7, na.pad=TRUE))) +
xlab("Hour of day") +
ylab(TeX("Air temperature ($^o$C)")) +
labs(title = "Diurnal fluctuations in air temperature") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw()
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_vline(aes(yintercept = mean(filter(overview, landcover = "Urban")$transmission_prob)), color = "#E66100")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_vline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", style = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$transmission_prob)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = air_temperature, col = landcover, shape = landcover)) +
geom_point(size = 2) + #aes(alpha = .2)
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) + I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
# geom_line(aes(y=rollmedian(air_temperature, 7, na.pad=TRUE))) +
xlab("Hour of day") +
ylab(TeX("Air temperature ($^o$C)")) +
labs(title = "Diurnal fluctuations in air temperature") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$air_temperature)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$air_temperature)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = biting_rate, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)) +
#           I(sin((2*2*2*pi*(x))/24)) + I(cos((2*2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,.26) +
ylab(TeX("Biting rate ($day^{-1}$)")) +
labs(title = "Diurnal fluctuations in biting rates") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$biting_rate)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$biting_rate)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$transmission_prob)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
# guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$transmission_prob)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
# guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
guides(alpha = FALSE, col = FALSE, shape = FALSE) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$transmission_prob)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = air_temperature, col = landcover, shape = landcover)) +
geom_point(size = 2) + #aes(alpha = .2)
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) + I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
# geom_line(aes(y=rollmedian(air_temperature, 7, na.pad=TRUE))) +
xlab("Hour of day") +
ylab(TeX("Air temperature ($^o$C)")) +
labs(title = "Diurnal fluctuations in air temperature") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$air_temperature)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$air_temperature)), color = "#5D3A9B", linetype = "dashed") +
theme(legend.position = c(0.2, 0.8))
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = air_temperature, col = landcover, shape = landcover)) +
geom_point(size = 2) + #aes(alpha = .2)
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) + I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
# geom_line(aes(y=rollmedian(air_temperature, 7, na.pad=TRUE))) +
xlab("Hour of day") +
ylab(TeX("Air temperature ($^o$C)")) +
# labs(title = "Diurnal fluctuations in air temperature") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$air_temperature)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$air_temperature)), color = "#5D3A9B", linetype = "dashed") +
theme(legend.position = c(0.2, 0.8))
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = biting_rate, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)) +
#           I(sin((2*2*2*pi*(x))/24)) + I(cos((2*2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,.26) +
ylab(TeX("Biting rate ($day^{-1}$)")) +
# labs(title = "Diurnal fluctuations in biting rates") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
# guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
guides(alpha = FALSE, col = FALSE, shape = FALSE) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$biting_rate)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$biting_rate)), color = "#5D3A9B", linetype = "dashed")
ggplot(overview, aes(x = hour(dt) + minute(dt)/60, y = transmission_prob, col = landcover, shape = landcover)) +
geom_point(size = 2) +
# geom_smooth(method = "lm",
#         formula = y ~
#           I(sin((2*pi*(x))/24)) + I(cos((2*pi*(x))/24)) +
#           I(sin((2*2*pi*(x))/24)) + I(cos((2*2*pi*(x))/24)),
#         se = FALSE) +
xlab("Hour of day") +
ylim(0,20) +
ylab("Transmission Probability (%)") +
# labs(title = "Diurnal fluctuations in transmission probabilities") +
scale_color_manual(values = c(Urban = "#E66100", All = "#E69F00", Agriculture = "#5D3A9B")) +
# guides(alpha = FALSE, col = guide_legend(title="Landcover type"), shape = guide_legend(title="Landcover type")) +
guides(alpha = FALSE, col = FALSE, shape = FALSE) +
theme_bw() +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Urban")$transmission_prob)), color = "#E66100", linetype = "dashed") +
geom_hline(aes(yintercept = mean(filter(overview, landcover == "Agriculture")$transmission_prob)), color = "#5D3A9B", linetype = "dashed")
chosen_four <- list.files(here::here("risk_maps",
"data",
"raw_data",
"ECOSTRESS",
"chosen_four"))
four_panel <- function(type, limits){
date <- ymd(substr(chosen_four, 14, 23))
hhmmss <- str_extract(chosen_four, regex('[0-9]{2}:{1}[0-9]{2}:{1}[0-9]{2}'))
dt <- ymd_hms(paste(date, hhmmss), tz = "America/Los_Angeles")
night <- raster(here::here("risk_maps",
"data",
"processed_data",
"ECOSTRESS",
type,
chosen_four[1]))
dawn <- raster(here::here("risk_maps",
"data",
"processed_data",
"ECOSTRESS",
type,
chosen_four[2]))
day <- raster(here::here("risk_maps",
"data",
"processed_data",
"ECOSTRESS",
type,
chosen_four[3]))
dusk <- raster(here::here("risk_maps",
"data",
"processed_data",
"ECOSTRESS",
type,
chosen_four[4]))
pal <- colorRampPalette(c("darkblue", "blue", "steelblue1", "white", "yellow", "orange", "red"))
plot(dawn,
col = pal(50),
# xlim=c(0,55),
# ylim=c(-10,50),
zlim=limits,
xlab="Longitude",
ylab = "Latitude")
title(paste0("Dawn (", dt[2],")"))
plot(day,
col = pal(50),
# xlim=c(0,55),
# ylim=c(-10,50),
zlim=limits,
xlab="Longitude",
ylab = "Latitude")
title(paste0("Day (", dt[3],")"))
plot(dusk,
col = pal(50),
# xlim=c(0,55),
# ylim=c(-10,50),
zlim=limits,
xlab="Longitude",
ylab = "Latitude")
title(paste0("Dusk (", dt[4],")"))
plot(night,
col = pal(50),
# xlim=c(0,55),
# ylim=c(-10,50),
zlim=limits,
xlab="Longitude",
ylab = "Latitude")
title(paste0("Night (", dt[1],")"))
}
four_panel("air_temperature", limits = c(11,41))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(here)
library(lubridate)
library(stringr)
library(dplyr)
library(tidyr)
library(raster)
library(zoo)
library(latex2exp)
T = c(seq(0,100,by=0.1))
mordecai <- data.frame(temperature = T)
coef = 100
ggplot(mordecai, aes(x = temperature)) +
stat_function(aes(col = "Biting rate"),
size = 1,
fun = function(x){(1.67*10^-4) * x * (x- 2.3) * (32.0 - x)^(1/2) * coef}, show.legend = TRUE, n = 1000000) + #bite
stat_function(aes(col = "Transmission probability"),
size = 1,
fun = function(x){-(2.94*10^-3) * x * (x - 11.3) * (x - 41.9)}, show.legend = TRUE, n = 1000) + #transmission
xlim(0, 45) +
scale_y_continuous(
name = "Transmission probability (%)",
limits = c(0,30),
sec.axis = sec_axis(~./coef, name=TeX("Biting rate ($day^{-1}$)"))) +
theme(legend.title = element_blank(),
# text=element_text(family = "TT Times New Roman")
) +
# labs(title = "Culex tarsalis biting and West Nile virus transmission rates",
#      subtitle = "From Mordecai et. al., 2019") +
xlab(TeX("Air temperature ($^o$C)")) +
scale_color_manual(values = c("red", "blue")) +
guides(size = FALSE) +
theme_bw() +
theme(legend.position = c(0.2, 0.8), legend.title = element_blank()) +
geom_linerange(aes(x = 19.2, ymin = 0, ymax = 10), color = "grey")+
geom_linerange(aes(x = 38.8, ymin = 0, ymax = 10), color = "grey")+
geom_linerange(aes(x = 29, ymin = 0, ymax = 19.5), color = "black", linetype = "dashed")+
geom_point(aes(x = 19.2, y = 10), color = "grey", size = 3) +
geom_point(aes(x = 38.8, y = 10), color = "grey", size = 3) +
geom_point(aes(x = 29, y = 19.5), color = "black", size = 3)
ggplot(mordecai, aes(x = temperature)) +
stat_function(aes(col = "Biting rate"),
size = 1,
fun = function(x){(1.67*10^-4) * x * (x- 2.3) * (32.0 - x)^(1/2) * coef}, show.legend = TRUE, n = 1000000) + #bite
stat_function(aes(col = "Transmission probability"),
size = 1,
fun = function(x){-(2.94*10^-3) * x * (x - 11.3) * (x - 41.9)}, show.legend = TRUE, n = 1000) + #transmission
xlim(0, 45) +
scale_y_continuous(
name = "Transmission probability (%)",
limits = c(0,30),
sec.axis = sec_axis(~./coef, name=TeX("Biting rate ($day^{-1}$)"))) +
theme(legend.title = element_blank(),
# text=element_text(family = "TT Times New Roman")
) +
# labs(title = "Culex tarsalis biting and West Nile virus transmission rates",
#      subtitle = "From Mordecai et. al., 2019") +
xlab(TeX("Air temperature ($^o$C)")) +
scale_color_manual(values = c("red", "blue")) +
guides(size = FALSE) +
theme_bw() +
theme(legend.position = c(0.2, 0.8), legend.title = element_blank()) +
geom_linerange(aes(x = 19.2, ymin = 0, ymax = 10), color = "grey")+
geom_linerange(aes(x = 38.8, ymin = 0, ymax = 10), color = "grey")+
geom_linerange(aes(x = 29, ymin = 0, ymax = 19.5), color = "black", linetype = "dashed")+
geom_point(aes(x = 19.2, y = 10), color = "grey", size = 3) +
geom_point(aes(x = 38.8, y = 10), color = "grey", size = 3) +
geom_point(aes(x = 29, y = 19.5), color = "black", size = 3)
bitemax <- optimize(bite, interval=c(0, 40), maximum=TRUE)$objective
bite <- function(T){
bite <- (1.67*10^-4) * T * (T- 2.3) * (32.0 - T)^(1/2)
bite <- ifelse(is.nan(bite), 0, bite)
return(bite)
}
transmit <- function(T){
-(2.94*10^-3) * T * (T - 11.3) * (T - 41.9)
}
bitemax <- optimize(bite, interval=c(0, 40), maximum=TRUE)$objective
transmax <- optimize(transmit, interval=c(0, 40), maximum=TRUE)$objective
all_pixels_integrate <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"all_pixels_integrate.RData")) %>% filter(!is.na(air_temperature)) #there are 3751 pixels on the edge that do not have values for every image, and these we remove.
all_pixels_integrate %>% names()
ap <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"all_pixels_location_match.RData"))
names(ap)
all_pixels_integrate <- ap %>% group_by(date) %>% summarise(air_temperature = mean(air_temperature), biting_rate = mean(biting_rate), transmission_prob = mean(transmission_prob))
avg_bite <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% bite
avg_transmit <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% transmit
t.test(x = all_pixels_integrate$biting_rate, mu = avg_bite)
t.test(x = all_pixels_integrate$transmission_prob, mu = avg_transmit)
t.test(x = all_pixels_integrate$biting_rate, mu = avg_bite)
avg_bite <- all_pixels_integrate$air_temperature %>% bite
avg_transmit <- all_pixels_integrate$air_temperature %>% transmit
t.test(x = all_pixels_integrate$biting_rate, y = avg_bite, paired = TRUE)
t.test(x = all_pixels_integrate$biting_rate, y = avg_bite, paired = TRUE)
t.test(x = all_pixels_integrate$transmission_prob, y = avg_transmit, paired = TRUE)
avg_bite <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% bite
avg_transmit <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% transmit
ap <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"all_pixels_location_match.RData"))%>% filter(!is.na(air_temperature))
all_pixels_integrate <- ap %>% group_by(date) %>% summarise(air_temperature = mean(air_temperature), biting_rate = mean(biting_rate), transmission_prob = mean(transmission_prob))
avg_bite <- all_pixels_integrate$air_temperature %>% bite
avg_transmit <- all_pixels_integrate$air_temperature %>% transmit
t.test(x = all_pixels_integrate$biting_rate, y = avg_bite, paired = TRUE)
t.test(x = all_pixels_integrate$transmission_prob, y = avg_transmit, paired = TRUE)
all_pixels_integrate <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"all_pixels_integrate.RData")) %>% filter(!is.na(air_temperature)) #there are 3751 pixels on the edge that do not have values for every image, and these we remove.
avg_bite <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% bite
avg_transmit <- all_pixels_integrate$air_temperature %>% mean(na.rm = TRUE) %>% transmit
t.test(x = all_pixels_integrate$biting_rate, mu = avg_bite)
t.test(x = all_pixels_integrate$transmission_prob, mu = avg_transmit)
all_pixels_integrate <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"all_pixels_integrate.RData")) %>% filter(!is.na(air_temperature)) #there are 3751 pixels on the edge that do not have values for every image, and these we remove.
all_pixels_integrate$avg_bite <- all_pixels_integrate$air_temperature %>% bite
all_pixels_integrate$avg_transmit <- all_pixels_integrate$air_temperature %>% transmit
t.test(x = all_pixels_integrate$biting_rate, y = all_pixels_integrate$avg_bite, paired = TRUE)
t.test(x = all_pixels_integrate$transmission_prob, y = all_pixels_integrate$avg_transmit, paired = TRUE)
names(all_pixels_integrate)
```{r}
landcover_avg <- readRDS(here::here("risk_maps",
"data",
"processed_data",
"landcover_avgs.RData"))
All <-filter(landcover_avg, landcover == "All")
bite <- function(T){
bite <- (1.67*10^-4) * T * (T- 2.3) * (32.0 - T)^(1/2)
bite[is.nan(bite)] <- 0
return(bite)
}
transmit <- function(T){
-(2.94*10^-3) * T * (T - 11.3) * (T - 41.9)
}
avg_bite <- All$air_temperature %>% bite
avg_transmit <- All$air_temperature %>% transmit
t.test(x = All$biting_rate, y = avg_bite, paired = TRUE)
t.test(x = All$transmission_prob, y = avg_transmit, paired = TRUE)
All <-filter(landcover_avg, landcover == "All")
bite <- function(T){
bite <- (1.67*10^-4) * T * (T- 2.3) * (32.0 - T)^(1/2)
bite[is.nan(bite)] <- 0
return(bite)
}
transmit <- function(T){
-(2.94*10^-3) * T * (T - 11.3) * (T - 41.9)
}
All$avg_bite <- All$air_temperature %>% bite
All$avg_transmit <- All$air_temperature %>% transmit
t.test(x = All$biting_rate, y = All$avg_bite, paired = TRUE)
t.test(x = All$transmission_prob, y = All$avg_transmit, paired = TRUE)
ggplot(All) + geom_histogram(aes(x = avg_bite - biting_rate))
names(All)
ggplot(All) + geom_histogram(aes(x = avg_bite - biting_rate, color = hour(dt)))
All$dt
All$dt%>% hour()
ggplot(All) + geom_histogram(aes(x = avg_bite - biting_rate, colour = hour(dt)))
ggplot(All) + geom_histogram(aes(x = avg_bite - biting_rate, fill = hour(dt)))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60, color = biting_rate))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60, color = avg_bite))
ggplot(All) + geom_point(aes(x = avg_transmit - transmission_prob, y = hour(dt) + minute(dt)/60, color = avg_transmit))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60, color = avg_bite))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60, color = biting_rate))
ggplot(All) + geom_point(aes(x = avg_bite - biting_rate, y = hour(dt) + minute(dt)/60, color = avg_bite))
setwd("~/Documents/GitHub/ESM203_Assignment_01")
setwd("~/Documents/GitHub/ESM203_Assignment_01/tutorial")
setwd("~/Documents/GitHub/ESM203_Assignment_01")
setwd("~/Documents/GitHub/ESM203_Assignment_01/ESM203_assignment_1_tutorial")
unlink('ESM203_assignment_1_tutorial_cache', recursive = TRUE)
setwd("~/Documents/GitHub/ESM203_Assignment_01/ESM203_assignment_1_tutorial")
ls
dir.exists("neighborhoods.png")
getwd()
rmarkdown::shiny_prerendered_clean('ESM203_assignment_1_tutorial.Rmd')
?uniroot.all
library(rootSolve)
?uniroot.all
install.packages(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='anna-boser', token='49BEDDE8DF11ABD12B3FFFA0BF5EEC54', secret='dl0VCMgpYai5RNW2sn5ti7U8ja6HI8N2WiTw9DEr')
rmarkdown::shiny_prerendered_clean('ESM203_assignment_1_tutorial.Rmd')
# load in data as a CSV
LA_nbhds <- read.csv(url("https://raw.githubusercontent.com/ecohydro/ESM203_Assignment_01/master/Assignment1_forStudents/ESM203_F2020_Ass1.csv"))
unlink('ESM203_assignment_1_tutorial_cache', recursive = TRUE)
# load in data as a CSV
LA_nbhds <- read.csv("data/ESM203_F2020_Ass1.csv")
